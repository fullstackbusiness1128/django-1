# Generated by Django 2.1.5 on 2021-01-06 17:12

import User.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('linkedin', models.URLField(blank=True)),
                ('simulation_date', models.DateTimeField(blank=True, null=True)),
                ('interpersonal_intelligence', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('composure', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('body_posture', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('mentorship', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('collaboration', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('modesty', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('caring', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('selflessness', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('emotional_balance', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('integrity', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('courageous_authenticity', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('strategic_focus', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('results_achievement', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('decisiveness', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('drive', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('autocratic_personality', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('self_awareness', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('relating_to_team', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('communication', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('openness_to_experience', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('conscientiousness', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('extraversion', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('agreeableness', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('neuroticism', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('system_1_awareness', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('system_2_awareness', models.IntegerField(blank=True, choices=[(-1, 'Average'), (0, 'Above Average'), (1, 'Exceptional')], null=True)),
                ('doctors_notes', models.CharField(blank=True, max_length=10000, null=True)),
                ('analysis_date', models.DateTimeField(blank=True, null=True)),
                ('is_paid', models.BooleanField(default=False)),
                ('contact_viewed', models.IntegerField(default=0)),
                ('company_name_viewed', models.IntegerField(default=0)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', User.models.UserManager()),
            ],
        ),
    ]
